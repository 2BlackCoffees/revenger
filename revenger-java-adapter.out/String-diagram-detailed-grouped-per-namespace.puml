@startuml
skinparam linetype ortho
title <size:20>String **detailed** and **grouped per namespace**</size>
note "Your are analyzing:\nString **detailed** and **grouped per namespace**\n\n==Filter==\nYou can click either the namespaces \nor class names for filtering them and their\ndirect dependencies.\n\n==Select other==\n* String **simplified** and **grouped per namespace**:\n   [[String-diagram-simplified-grouped-per-namespace.svg]]\n* Full diagram **detailed** and **grouped per namespace**:\n   [[full-diagram-detailed-grouped-per-namespace.svg]]\n* Home:\n   [[index.html]]" as FloatingNote
class String [[String-diagram-detailed-grouped-per-namespace.svg]] #yellow {
}
' Closing all previous_sub_namespace_list namespace None because file analysis is finished.
namespace Examples [[Examples-diagram-detailed-grouped-per-namespace.svg]] {
namespace Examples.BadDesign [[Examples.BadDesign-diagram-detailed-grouped-per-namespace.svg]] {
  class Examples.BadDesign.DB [[Examples.BadDesign.DB-diagram-detailed-grouped-per-namespace.svg]]  {
    + get(<font color="6060BB">queryString:String</font>): <font color="BB6060">String</font>
    + getCarsWhere(<font color="6060BB">whereQueryString:String</font>): <font color="BB6060">String</font>
    + set(<font color="6060BB">queryString:String</font>): <font color="BB6060">void</font>
    + update(<font color="6060BB">queryString:String</font>): <font color="BB6060">void</font>
    + getUserWhere(<font color="6060BB">query:String</font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.User</font>
    + getCustomerWhere(<font color="6060BB">query:String</font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.Customer</font>
    + getItemWhere(<font color="6060BB">query:String</font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.Item</font>
    + getInvoiceWhere(<font color="6060BB">query:String</font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.Invoice</font>
    + getComplaintsWhere(<font color="6060BB">query:String</font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.Complaints</font>
    + getUserHavingItem(<font color="6060BB">item:Examples.BadDesign.FakeEntitities.Item</font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.User</font>
    + getCustomerFromComplaint(<font color="6060BB">complaint:Examples.BadDesign.FakeEntitities.Complaints</font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.Customer</font>
    + getItemFromUser(<font color="6060BB">user:Examples.BadDesign.FakeEntitities.User</font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.Item</font>
    + getInvoiceFromCustomer(<font color="6060BB">c:Examples.BadDesign.FakeEntitities.Customer</font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.Invoice</font>
    + getComplaintsFromItem(<font color="6060BB">item:Examples.BadDesign.FakeEntitities.Item</font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.Complaints</font>
    + getFirstUser(<font color="6060BB"></font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.User</font>
    + getFirstCustomerWhere(<font color="6060BB"></font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.Customer</font>
    + getFirstItem(<font color="6060BB"></font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.Item</font>
    + getFirstInvoice(<font color="6060BB"></font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.Invoice</font>
    + getFirstComplaints(<font color="6060BB"></font>): <font color="BB6060">Examples.BadDesign.FakeEntitities.Complaints</font>
    + getCarFromDriver(<font color="6060BB">d:Examples.BadDesign.CarExample.CarParts.Driver</font>): <font color="BB6060">Examples.BadDesign.CarExample.Car</font>
    + getDriverFromCar(<font color="6060BB">c:Examples.BadDesign.CarExample.Car</font>): <font color="BB6060">Examples.BadDesign.CarExample.CarParts.Driver</font>
    + getWheelsFromCar(<font color="6060BB">c:Examples.BadDesign.CarExample.Car</font>): <font color="BB6060">Examples.BadDesign.CarExample.CarParts.Wheels</font>
    + getDoorsFromCar(<font color="6060BB">c:Examples.BadDesign.CarExample.Car</font>): <font color="BB6060">Examples.BadDesign.CarExample.CarParts.Doors</font>
    + getSeatsFromCar(<font color="6060BB">c:Examples.BadDesign.CarExample.Car</font>): <font color="BB6060">Examples.BadDesign.CarExample.CarParts.Seats</font>
  }
'Compared namespace Examples.BadDesign [[Examples.BadDesign-diagram-detailed-grouped-per-namespace.svg]] { with last element of   }
' Closing all previous_sub_namespace_list namespace None because file analysis is finished.
' Closing namespace BadDesign
}
' Closing namespace Examples
}
namespace Examples [[Examples-diagram-detailed-grouped-per-namespace.svg]] {
namespace Examples.BetterDesign [[Examples.BetterDesign-diagram-detailed-grouped-per-namespace.svg]] {
  class Examples.BetterDesign.DBCar [[Examples.BetterDesign.DBCar-diagram-detailed-grouped-per-namespace.svg]]  {
    + getCarsForDriver(<font color="6060BB">driver:Examples.BetterDesign.CarExample.CarParts.Driver</font>): <font color="BB6060">String</font>
    + updateCar(<font color="6060BB">car:Examples.BetterDesign.CarExample.Car, seats:Examples.BetterDesign.CarExample.CarParts.Seats</font>): <font color="BB6060">void</font>
    + updateCar(<font color="6060BB">car:Examples.BetterDesign.CarExample.Car, doors:Examples.BetterDesign.CarExample.CarParts.Doors</font>): <font color="BB6060">void</font>
    + sellCarTo(<font color="6060BB">car:Examples.BetterDesign.CarExample.Car, driver:Examples.BetterDesign.CarExample.CarParts.Driver</font>): <font color="BB6060">void</font>
    + getCarFromDriver(<font color="6060BB">d:Examples.BetterDesign.CarExample.CarParts.Driver</font>): <font color="BB6060">Examples.BetterDesign.CarExample.Car</font>
    + getDriverFromCar(<font color="6060BB">c:Examples.BetterDesign.CarExample.Car</font>): <font color="BB6060">Examples.BetterDesign.CarExample.CarParts.Driver</font>
    + getWheelsFromCar(<font color="6060BB">c:Examples.BetterDesign.CarExample.Car</font>): <font color="BB6060">Examples.BetterDesign.CarExample.CarParts.Wheels</font>
    + getDoorsFromCar(<font color="6060BB">c:Examples.BetterDesign.CarExample.Car</font>): <font color="BB6060">Examples.BetterDesign.CarExample.CarParts.Doors</font>
    + getSeatsFromCar(<font color="6060BB">c:Examples.BetterDesign.CarExample.Car</font>): <font color="BB6060">Examples.BetterDesign.CarExample.CarParts.Seats</font>
  }
'Compared namespace Examples.BetterDesign [[Examples.BetterDesign-diagram-detailed-grouped-per-namespace.svg]] { with last element of   }
' Closing all previous_sub_namespace_list namespace None because file analysis is finished.
' Closing namespace BetterDesign
}
' Closing namespace Examples
}
namespace preadapter [[preadapter-diagram-detailed-grouped-per-namespace.svg]] {
class preadapter.Logger [[preadapter.Logger-diagram-detailed-grouped-per-namespace.svg]]  {
  + loggingType: preadapter.LoggingType
==
  - log(<font color="6060BB">logType:String, text:String, startText:String</font>): <font color="BB6060">void</font>
  - <font color="909090">log.result: String[]</font>
--
  + logError(<font color="6060BB">text:String, startText:String</font>): <font color="BB6060">void</font>
  + logError(<font color="6060BB">text:String</font>): <font color="BB6060">void</font>
  + logWarning(<font color="6060BB">text:String, startText:String</font>): <font color="BB6060">void</font>
  + logWarning(<font color="6060BB">text:String</font>): <font color="BB6060">void</font>
  + logInfo(<font color="6060BB">text:String, startText:String</font>): <font color="BB6060">void</font>
  + logInfo(<font color="6060BB">text:String</font>): <font color="BB6060">void</font>
  + logDebug(<font color="6060BB">text:String, startText:String</font>): <font color="BB6060">void</font>
  + logDebug(<font color="6060BB">text:String</font>): <font color="BB6060">void</font>
  + logTrace(<font color="6060BB">text:String, startText:String</font>): <font color="BB6060">void</font>
  + logTrace(<font color="6060BB">text:String</font>): <font color="BB6060">void</font>
}
class preadapter.Revenger [[preadapter.Revenger-diagram-detailed-grouped-per-namespace.svg]]  {
  + main(<font color="6060BB">args:String</font>): <font color="BB6060">void</font>
  - <font color="909090">main.from_dir: String</font>
  - <font color="909090">main.to_dir: String</font>
  - <font color="909090">main.logger: preadapter.Logger</font>
  - <font color="909090">main.index: int</font>
--
}
'Compared namespace preadapter [[preadapter-diagram-detailed-grouped-per-namespace.svg]] { with last element of }
' Closing all previous_sub_namespace_list namespace None because file analysis is finished.
' Closing namespace preadapter
}
namespace preadapter [[preadapter-diagram-detailed-grouped-per-namespace.svg]] {
namespace preadapter.domain [[preadapter.domain-diagram-detailed-grouped-per-namespace.svg]] {
  class preadapter.domain.Datastructure [[preadapter.domain.Datastructure-diagram-detailed-grouped-per-namespace.svg]]  {
    + class_to_datastructure: dict[String,SubDataStructure]
    + namespace_to_datastructures: dict[String,list[SubDataStructure]]
    + namespace_to_namespace_list: dict[String,list[String]]
    + skip_types: list[String]
    + logger: preadapter.Logger
==
    + ResolveClassNames(<font color="6060BB"></font>): <font color="BB6060">void</font>
    - <font color="909090">ResolveClassNames.variables: list[Variable]</font>
    - <font color="909090">ResolveClassNames.variable: Variable</font>
    - <font color="909090">ResolveClassNames.index: int</font>
    - <font color="909090">ResolveClassNames.index: int</font>
    - <font color="909090">ResolveClassNames.index: int</font>
    - <font color="909090">ResolveClassNames.method: Method</font>
    - <font color="909090">ResolveClassNames.subDataStructure: SubDataStructure</font>
--
    - CorrectClassScope(<font color="6060BB">subDataStructure:SubDataStructure, classNameList:list[String], isAnymousCall:boolean</font>): <font color="BB6060">void</font>
    - <font color="909090">CorrectClassScope.index: int</font>
--
    + GetFQDNForUsedClassName(<font color="6060BB">subDataStructure:SubDataStructure, classUsage:String, isAnonymousCall:boolean, mostProbableNamespace:String</font>): <font color="BB6060">String</font>
    - <font color="909090">GetFQDNForUsedClassName.className: String</font>
    - <font color="909090">GetFQDNForUsedClassName.classnameList: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.finalClassName: String</font>
    - <font color="909090">GetFQDNForUsedClassName.fittingClassNames: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.classNameFromImports: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.classNameEndingInPackageImport: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.fqdnClassName: String</font>
    - <font color="909090">GetFQDNForUsedClassName.fqdnFromPackageImport: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.bestFittingClassNames: list[String]</font>
--
    + get_skip_types(<font color="6060BB"></font>): <font color="BB6060">list[String]</font>
--
    + append_sub_datastructure(<font color="6060BB">sub_datastructure:SubDataStructure</font>): <font color="BB6060">void</font>
    - <font color="909090">append_sub_datastructure.fqdn_class_name: String</font>
    - <font color="909090">append_sub_datastructure.namespace_name: String</font>
--
    + append_class(<font color="6060BB">filename:String, filemodule:String, usings:list[String], fqdn_class_name:String, nameSpaceList:list[String]</font>): <font color="BB6060">SubDataStructure</font>
    - <font color="909090">append_class.sub_datastructure: SubDataStructure</font>
--
    + get_classname_list(<font color="6060BB"></font>): <font color="BB6060">list[String]</font>
    + get_datastructures_from_class_name(<font color="6060BB">class_name:String</font>): <font color="BB6060">SubDataStructure</font>
  }
  class preadapter.domain.ASTVisitorDebug [[preadapter.domain.ASTVisitorDebug-diagram-detailed-grouped-per-namespace.svg]]  {
    + out: PrintStream
    + deepness: HandleDeepness
==
    + visit(<font color="6060BB">n:AnnotationDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:AnnotationMemberDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ArrayAccessExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ArrayCreationExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ArrayCreationLevel, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ArrayInitializerExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ArrayType, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:AssertStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:AssignExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:BinaryExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:BlockComment, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:BlockStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:BooleanLiteralExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:BreakStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:CastExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:CatchClause, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:CharLiteralExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ClassExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ClassOrInterfaceDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ClassOrInterfaceType, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:CompilationUnit, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ConditionalExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ConstructorDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ContinueStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:DoStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:DoubleLiteralExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:EmptyStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:EnclosedExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:EnumConstantDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:EnumDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ExplicitConstructorInvocationStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ExpressionStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:FieldAccessExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:FieldDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ForEachStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ForStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:IfStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ImportDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:InitializerDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:InstanceOfExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:IntegerLiteralExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:IntersectionType, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:JavadocComment, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:LabeledStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:LambdaExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:LineComment, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:LocalClassDeclarationStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:LongLiteralExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:MarkerAnnotationExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:MemberValuetuple, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:MethodCallExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:MethodDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:MethodReferenceExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ModuleDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ModuleExportsDirective, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ModuleOpensDirective, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ModuleProvidesDirective, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ModuleRequiresDirective, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ModuleUsesDirective, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:Name, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:NameExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:Nodelist, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:NormalAnnotationExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:NullLiteralExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ObjectCreationExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:PackageDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:Parameter, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:PrimitiveType, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ReturnStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:SimpleName, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:SingleMemberAnnotationExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:StringLiteralExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:SuperExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:SwitchEntry, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:SwitchStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:SynchronizedStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ThisExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ThrowStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:TryStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:TypeExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:TypeParameter, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:UnaryExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:UnionType, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:UnknownType, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:UnparsableStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:VariableDeclarationExpr, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:VariableDeclarator, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:VoidType, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:WhileStmt, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:WildcardType, arg:Void</font>): <font color="BB6060">void</font>
--
    + main(<font color="6060BB">args:String</font>): <font color="BB6060">void</font>
    - <font color="909090">main.cu: CompilationUnit</font>
    - <font color="909090">main.file: String</font>
--
  }
  class preadapter.domain.ASTVisitor [[preadapter.domain.ASTVisitor-diagram-detailed-grouped-per-namespace.svg]]  {
    + logger: preadapter.Logger
    + datastructure: preadapter.domain.Datastructure
    + activeMethodList: list[String]
    + activeClassnameList: list[String]
    + namespaceList: list[String]
    + allUsing: list[String]
    + usingDict: dict[String,String]
    + deepness: HandleDeepness
    + ignoreType: list[String]
==
    + SimplifyType(<font color="6060BB">type:String</font>): <font color="BB6060">String</font>
--
    + cleanClassName(<font color="6060BB">className:String</font>): <font color="BB6060">String</font>
    - <font color="909090">cleanClassName.namespace: String</font>
    - <font color="909090">cleanClassName.namespaceLength: int</font>
--
    + CreateClassInterface(<font color="6060BB">node:ClassOrInterfaceDeclaration</font>): <font color="BB6060">String</font>
    - <font color="909090">CreateClassInterface.fqdnCurrentClassName: String</font>
    - <font color="909090">CreateClassInterface.fqdnParentClassName: String</font>
    - <font color="909090">CreateClassInterface.parentSubDataStructure: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">CreateClassInterface.subDataStructure: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">CreateClassInterface.fqdnCurrentClassNameFinal: String</font>
    - <font color="909090">CreateClassInterface.extendedTypeStr: String</font>
--
    - addArgumentType(<font color="6060BB">methodName:String, fqdnParentClassName:String, parameterType:Type, parameterName:String, argumentsTuple:list[tuple[String,String,String]]</font>): <font color="BB6060">void</font>
    - <font color="909090">addArgumentType.argumentTypeString: String</font>
    - <font color="909090">addArgumentType.mostProbableNS: String</font>
--
    + visit(<font color="6060BB">n:MethodDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    - <font color="909090">visit.methodName: String</font>
    - <font color="909090">visit.fqdnParentClassName: String</font>
    - <font color="909090">visit.subDataStructure: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">visit.argument: Optional_DOT_empty</font>
    - <font color="909090">visit.className: String</font>
    - <font color="909090">visit.fqdnParentClassName: String</font>
    - <font color="909090">visit.subDataStructure: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">visit.argumentTypeString: String</font>
    - <font color="909090">visit.mostProbableNS: String</font>
    - <font color="909090">visit.variableDeclarator: VariableDeclarator</font>
    - <font color="909090">visit.importName: String</font>
    - <font color="909090">visit.enumValueName: String</font>
    - <font color="909090">visit.fqdnParentClassName: String</font>
    - <font color="909090">visit.subDataStructure: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">visit.fqdnCurrentClassName: String</font>
    - <font color="909090">visit.fqdnParentClassName: String</font>
    - <font color="909090">visit.subDataStructureParent: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">visit.subDataStructureChild: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">visit.fqdnParentClassName: String</font>
    - <font color="909090">visit.subDataStructureParent: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">visit.methodName: String</font>
    - <font color="909090">visit.method: preadapter.domain.Datastructure_DOT_Method</font>
--
    + visit(<font color="6060BB">n:ClassOrInterfaceDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:FieldDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:PackageDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ImportDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:EnumConstantDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:EnumDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:VariableDeclarator, arg:Void</font>): <font color="BB6060">void</font>
--
    + main(<font color="6060BB">args:String</font>): <font color="BB6060">void</font>
    - <font color="909090">main.cu: CompilationUnit</font>
    - <font color="909090">main.file: String</font>
--
  }
'Compared namespace preadapter.domain [[preadapter.domain-diagram-detailed-grouped-per-namespace.svg]] { with last element of   }
' Closing all previous_sub_namespace_list namespace None because file analysis is finished.
' Closing namespace domain
}
' Closing namespace preadapter
}
namespace preadapter [[preadapter-diagram-detailed-grouped-per-namespace.svg]] {
namespace preadapter.infrastructure [[preadapter.infrastructure-diagram-detailed-grouped-per-namespace.svg]] {
  class preadapter.infrastructure.CreateYML [[preadapter.infrastructure.CreateYML-diagram-detailed-grouped-per-namespace.svg]]  {
    + dummperOptions: DumperOptions.FlowStyle
    + startMark: Mark
    + endMark: Mark
==
    - appendTupleNodeValueSequenceNode(<font color="6060BB">mappingNode:dictpingNode, key:String, value:SequenceNode</font>): <font color="BB6060">boolean</font>
    - appendTupleNodeValueString(<font color="6060BB">mappingNode:dictpingNode, key:String, value:String</font>): <font color="BB6060">boolean</font>
    - appendTupleNodeValueStringToSequenceNode(<font color="6060BB">sequenceNode:SequenceNode, key:String, value:String</font>): <font color="BB6060">boolean</font>
--
    - appendSequence(<font color="6060BB">mappingNode:dictpingNode, list:list[String], nodeName:String</font>): <font color="BB6060">void</font>
    - <font color="909090">appendSequence.subSequenceNode: SequenceNode</font>
--
    + Create(<font color="6060BB">datastructure:preadapter.domain.Datastructure, toFile:String, logger:preadapter.Logger</font>): <font color="BB6060">void</font>
    - <font color="909090">Create.subDataStructure: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">Create.yaml: Yaml</font>
    - <font color="909090">Create.writer: PrintWriter</font>
--
  }
'Compared namespace preadapter.infrastructure [[preadapter.infrastructure-diagram-detailed-grouped-per-namespace.svg]] { with last element of   }
' Closing all previous_sub_namespace_list namespace None because file analysis is finished.
' Closing namespace infrastructure
}
' Closing namespace preadapter
}
namespace preadapter [[preadapter-diagram-detailed-grouped-per-namespace.svg]] {
namespace preadapter.service [[preadapter.service-diagram-detailed-grouped-per-namespace.svg]] {
  class preadapter.service.AnalyzeAST [[preadapter.service.AnalyzeAST-diagram-detailed-grouped-per-namespace.svg]]  {
    + SearchRecurseCSharpToYAML(<font color="6060BB">fromDir:String, toDir:String, logger:preadapter.Logger</font>): <font color="BB6060">void</font>
    - <font color="909090">SearchRecurseCSharpToYAML.datastructure: preadapter.domain.Datastructure</font>
    - <font color="909090">SearchRecurseCSharpToYAML.listFilePaths: list[String]</font>
    - <font color="909090">SearchRecurseCSharpToYAML.cu: CompilationUnit</font>
    - <font color="909090">SearchRecurseCSharpToYAML.filePath: String</font>
    - <font color="909090">SearchRecurseCSharpToYAML.toFile: String</font>
--
  }
  class preadapter.service.RecursiveFileProcessor [[preadapter.service.RecursiveFileProcessor-diagram-detailed-grouped-per-namespace.svg]]  {
    + SearchPath(<font color="6060BB">path:String</font>): <font color="BB6060">list[String]</font>
    - <font color="909090">SearchPath.fileList: list[String]</font>
--
    - ProcessDirectory(<font color="6060BB">sourceDirectory:String, fileList:list[String]</font>): <font color="BB6060">void</font>
    - <font color="909090">ProcessDirectory.stream: DirectoryStream[Path]</font>
    - <font color="909090">ProcessDirectory.isDirectory: boolean</font>
    - <font color="909090">ProcessDirectory.path: Path</font>
--
  }
'Compared namespace preadapter.service [[preadapter.service-diagram-detailed-grouped-per-namespace.svg]] { with last element of   }
' Closing all previous_sub_namespace_list namespace None because file analysis is finished.
' Closing namespace service
}
' Closing namespace preadapter
}
 ' *************************************** 
 ' *************************************** 
 ' *************************************** 
' Class relations extracted from namespace:
' 
' Class relations extracted from namespace:
' Examples.BadDesign
Examples.BadDesign.DB .[#6060BB].> String  : uses 
' Class relations extracted from namespace:
' Examples.BetterDesign
Examples.BetterDesign.DBCar .[#6060BB].> String  : uses 
' Class relations extracted from namespace:
' preadapter
preadapter.Logger .[#6060BB].> String  : uses 
preadapter.Revenger .[#6060BB].> String  : uses 
preadapter.Revenger -[#909090]-> String  : uses 
preadapter.Revenger -[#909090]-> preadapter.Logger  : uses 
' Class relations extracted from namespace:
' preadapter.domain
preadapter.domain.Datastructure *-[#10BB10]- preadapter.Logger 
preadapter.domain.Datastructure .[#6060BB].> String  : uses 
preadapter.domain.Datastructure -[#909090]-> String  : uses 
preadapter.domain.ASTVisitorDebug .[#6060BB].> String  : uses 
preadapter.domain.ASTVisitorDebug -[#909090]-> String  : uses 
preadapter.domain.ASTVisitor *-[#10BB10]- preadapter.Logger 
preadapter.domain.ASTVisitor *-[#10BB10]- preadapter.domain.Datastructure 
preadapter.domain.ASTVisitor .[#6060BB].> String  : uses 
preadapter.domain.ASTVisitor -[#909090]-> String  : uses 
' Class relations extracted from namespace:
' preadapter.infrastructure
preadapter.infrastructure.CreateYML .[#6060BB].> String  : uses 
preadapter.infrastructure.CreateYML .[#6060BB].> preadapter.domain.Datastructure  : uses 
preadapter.infrastructure.CreateYML .[#6060BB].> preadapter.Logger  : uses 
' Class relations extracted from namespace:
' preadapter.service
preadapter.service.AnalyzeAST .[#6060BB].> String  : uses 
preadapter.service.AnalyzeAST .[#6060BB].> preadapter.Logger  : uses 
preadapter.service.AnalyzeAST -[#909090]-> preadapter.domain.Datastructure  : uses 
preadapter.service.AnalyzeAST -[#909090]-> String  : uses 
preadapter.service.RecursiveFileProcessor .[#6060BB].> String  : uses 
@enduml