@startuml
skinparam linetype ortho
title <size:20>preadapter.infrastructure **detailed** </size>
note "Your are analyzing:\npreadapter.infrastructure **detailed** \n\n==Filter==\nYou can click either the namespaces \nor class names for filtering them and their\ndirect dependencies.\n\n==Select other==\n* preadapter.infrastructure **simplified** :\n   [[preadapter.infrastructure-diagram-simplified.svg]]\n* Full diagram **detailed** and **grouped per namespace**:\n   [[full-diagram-detailed-grouped-per-namespace.svg]]\n* Home:\n   [[index.html]]" as FloatingNote
class DumperOptions.FlowStyle [[DumperOptions.FlowStyle-diagram-detailed.svg]] #MintCream {
}
class Mark [[Mark-diagram-detailed.svg]] #MintCream {
}
class dictpingNode [[dictpingNode-diagram-detailed.svg]] #MintCream {
}
class SequenceNode [[SequenceNode-diagram-detailed.svg]] #MintCream {
}
class Yaml [[Yaml-diagram-detailed.svg]] #MintCream {
}
class PrintWriter [[PrintWriter-diagram-detailed.svg]] #MintCream {
}
class preadapter.Logger [[preadapter.Logger-diagram-detailed.svg]]  {
  + loggingType: preadapter.LoggingType
==
  - log(<font color="6060BB">logType:String, text:String, startText:String</font>): <font color="BB6060">void</font>
  - <font color="909090">log.result: String[]</font>
--
  + logError(<font color="6060BB">text:String, startText:String</font>): <font color="BB6060">void</font>
  + logError(<font color="6060BB">text:String</font>): <font color="BB6060">void</font>
  + logWarning(<font color="6060BB">text:String, startText:String</font>): <font color="BB6060">void</font>
  + logWarning(<font color="6060BB">text:String</font>): <font color="BB6060">void</font>
  + logInfo(<font color="6060BB">text:String, startText:String</font>): <font color="BB6060">void</font>
  + logInfo(<font color="6060BB">text:String</font>): <font color="BB6060">void</font>
  + logDebug(<font color="6060BB">text:String, startText:String</font>): <font color="BB6060">void</font>
  + logDebug(<font color="6060BB">text:String</font>): <font color="BB6060">void</font>
  + logTrace(<font color="6060BB">text:String, startText:String</font>): <font color="BB6060">void</font>
  + logTrace(<font color="6060BB">text:String</font>): <font color="BB6060">void</font>
}
  class preadapter.domain.Datastructure [[preadapter.domain.Datastructure-diagram-detailed.svg]]  {
    + class_to_datastructure: dict[String,SubDataStructure]
    + namespace_to_datastructures: dict[String,list[SubDataStructure]]
    + namespace_to_namespace_list: dict[String,list[String]]
    + skip_types: list[String]
    + logger: preadapter.Logger
==
    + ResolveClassNames(<font color="6060BB"></font>): <font color="BB6060">void</font>
    - <font color="909090">ResolveClassNames.variables: list[Variable]</font>
    - <font color="909090">ResolveClassNames.variable: <not!yet?read}file>Variable</font>
    - <font color="909090">ResolveClassNames.index: int</font>
    - <font color="909090">ResolveClassNames.index: int</font>
    - <font color="909090">ResolveClassNames.index: int</font>
    - <font color="909090">ResolveClassNames.method: preadapter.domain.Datastructure.Method</font>
    - <font color="909090">ResolveClassNames.subDataStructure: preadapter.domain.Datastructure.SubDataStructure</font>
--
    - CorrectClassScope(<font color="6060BB">subDataStructure:preadapter.domain.Datastructure.SubDataStructure, classNameList:list[String], isAnymousCall:boolean</font>): <font color="BB6060">void</font>
    - <font color="909090">CorrectClassScope.index: int</font>
--
    + GetFQDNForUsedClassName(<font color="6060BB">subDataStructure:preadapter.domain.Datastructure.SubDataStructure, classUsage:String, isAnonymousCall:boolean, mostProbableNamespace:String</font>): <font color="BB6060">String</font>
    - <font color="909090">GetFQDNForUsedClassName.className: String</font>
    - <font color="909090">GetFQDNForUsedClassName.classnameList: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.finalClassName: String</font>
    - <font color="909090">GetFQDNForUsedClassName.fittingClassNames: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.classNameFromImports: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.classNameEndingInPackageImport: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.fqdnClassName: String</font>
    - <font color="909090">GetFQDNForUsedClassName.fqdnFromPackageImport: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.bestFittingClassNames: list[String]</font>
--
    + get_skip_types(<font color="6060BB"></font>): <font color="BB6060">list[String]</font>
--
    + append_sub_datastructure(<font color="6060BB">sub_datastructure:preadapter.domain.Datastructure.SubDataStructure</font>): <font color="BB6060">void</font>
    - <font color="909090">append_sub_datastructure.fqdn_class_name: String</font>
    - <font color="909090">append_sub_datastructure.namespace_name: String</font>
--
    + append_class(<font color="6060BB">filename:String, filemodule:String, usings:list[String], fqdn_class_name:String, nameSpaceList:list[String]</font>): <font color="BB6060">preadapter.domain.Datastructure.SubDataStructure</font>
    - <font color="909090">append_class.sub_datastructure: preadapter.domain.Datastructure.SubDataStructure</font>
--
    + get_classname_list(<font color="6060BB"></font>): <font color="BB6060">list[String]</font>
    + get_datastructures_from_class_name(<font color="6060BB">class_name:String</font>): <font color="BB6060">preadapter.domain.Datastructure.SubDataStructure</font>
  }
  class preadapter.infrastructure.CreateYML [[preadapter.infrastructure.CreateYML-diagram-detailed.svg]] #yellow {
    + dummperOptions: DumperOptions.FlowStyle
    + startMark: Mark
    + endMark: Mark
==
    - appendTupleNodeValueSequenceNode(<font color="6060BB">mappingNode:dictpingNode, key:String, value:SequenceNode</font>): <font color="BB6060">boolean</font>
    - appendTupleNodeValueString(<font color="6060BB">mappingNode:dictpingNode, key:String, value:String</font>): <font color="BB6060">boolean</font>
    - appendTupleNodeValueStringToSequenceNode(<font color="6060BB">sequenceNode:SequenceNode, key:String, value:String</font>): <font color="BB6060">boolean</font>
--
    - appendSequence(<font color="6060BB">mappingNode:dictpingNode, list:list[String], nodeName:String</font>): <font color="BB6060">void</font>
    - <font color="909090">appendSequence.subSequenceNode: SequenceNode</font>
--
    + Create(<font color="6060BB">datastructure:preadapter.domain.Datastructure, toFile:String, logger:preadapter.Logger</font>): <font color="BB6060">void</font>
    - <font color="909090">Create.yaml: Yaml</font>
    - <font color="909090">Create.writer: PrintWriter</font>
--
  }
 ' *************************************** 
 ' *************************************** 
 ' *************************************** 
' Class relations extracted from namespace:
' 
' Class relations extracted from namespace:
' preadapter
' Class relations extracted from namespace:
' preadapter.domain
preadapter.domain.Datastructure *-[#10BB10]- preadapter.Logger 
' Class relations extracted from namespace:
' preadapter.infrastructure
preadapter.infrastructure.CreateYML *-[#10BB10]- DumperOptions.FlowStyle 
preadapter.infrastructure.CreateYML *-[#10BB10]- Mark 
preadapter.infrastructure.CreateYML .[#6060BB].> dictpingNode  : uses 
preadapter.infrastructure.CreateYML .[#6060BB].> SequenceNode  : uses 
preadapter.infrastructure.CreateYML -[#909090]-> SequenceNode  : uses 
preadapter.infrastructure.CreateYML .[#6060BB].> preadapter.domain.Datastructure  : uses 
preadapter.infrastructure.CreateYML .[#6060BB].> preadapter.Logger  : uses 
preadapter.infrastructure.CreateYML -[#909090]-> Yaml  : uses 
preadapter.infrastructure.CreateYML -[#909090]-> PrintWriter  : uses 
@enduml