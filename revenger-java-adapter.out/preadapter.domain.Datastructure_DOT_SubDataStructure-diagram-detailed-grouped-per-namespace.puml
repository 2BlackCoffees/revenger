@startuml
skinparam linetype ortho
title <size:20>preadapter.domain.Datastructure_DOT_SubDataStructure **detailed** and **grouped per namespace**</size>
note "Your are analyzing:\npreadapter.domain.Datastructure_DOT_SubDataStructure **detailed** and **grouped per namespace**\n\n==Filter==\nYou can click either the namespaces \nor class names for filtering them and their\ndirect dependencies.\n\n==Select other==\n* preadapter.domain.Datastructure_DOT_SubDataStructure **simplified** and **grouped per namespace**:\n   [[preadapter.domain.Datastructure_DOT_SubDataStructure-diagram-simplified-grouped-per-namespace.svg]]\n* Full diagram **detailed** and **grouped per namespace**:\n   [[full-diagram-detailed-grouped-per-namespace.svg]]\n* Home:\n   [[index.html]]" as FloatingNote
namespace preadapter [[preadapter-diagram-detailed-grouped-per-namespace.svg]] {
namespace preadapter.domain [[preadapter.domain-diagram-detailed-grouped-per-namespace.svg]] {
  class preadapter.domain.Datastructure_DOT_SubDataStructure [[preadapter.domain.Datastructure_DOT_SubDataStructure-diagram-detailed-grouped-per-namespace.svg]] #yellow {
  }
  class preadapter.domain.Datastructure [[preadapter.domain.Datastructure-diagram-detailed-grouped-per-namespace.svg]]  {
    + class_to_datastructure: dict[String,SubDataStructure]
    + namespace_to_datastructures: dict[String,list[SubDataStructure]]
    + namespace_to_namespace_list: dict[String,list[String]]
    + skip_types: list[String]
    + logger: preadapter.Logger
==
    + ResolveClassNames(<font color="6060BB"></font>): <font color="BB6060">void</font>
    - <font color="909090">ResolveClassNames.variables: list[Variable]</font>
    - <font color="909090">ResolveClassNames.variable: Variable</font>
    - <font color="909090">ResolveClassNames.index: int</font>
    - <font color="909090">ResolveClassNames.index: int</font>
    - <font color="909090">ResolveClassNames.index: int</font>
    - <font color="909090">ResolveClassNames.method: Method</font>
    - <font color="909090">ResolveClassNames.subDataStructure: SubDataStructure</font>
--
    - CorrectClassScope(<font color="6060BB">subDataStructure:SubDataStructure, classNameList:list[String], isAnymousCall:boolean</font>): <font color="BB6060">void</font>
    - <font color="909090">CorrectClassScope.index: int</font>
--
    + GetFQDNForUsedClassName(<font color="6060BB">subDataStructure:SubDataStructure, classUsage:String, isAnonymousCall:boolean, mostProbableNamespace:String</font>): <font color="BB6060">String</font>
    - <font color="909090">GetFQDNForUsedClassName.className: String</font>
    - <font color="909090">GetFQDNForUsedClassName.classnameList: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.finalClassName: String</font>
    - <font color="909090">GetFQDNForUsedClassName.fittingClassNames: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.classNameFromImports: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.classNameEndingInPackageImport: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.fqdnClassName: String</font>
    - <font color="909090">GetFQDNForUsedClassName.fqdnFromPackageImport: list[String]</font>
    - <font color="909090">GetFQDNForUsedClassName.bestFittingClassNames: list[String]</font>
--
    + get_skip_types(<font color="6060BB"></font>): <font color="BB6060">list[String]</font>
--
    + append_sub_datastructure(<font color="6060BB">sub_datastructure:SubDataStructure</font>): <font color="BB6060">void</font>
    - <font color="909090">append_sub_datastructure.fqdn_class_name: String</font>
    - <font color="909090">append_sub_datastructure.namespace_name: String</font>
--
    + append_class(<font color="6060BB">filename:String, filemodule:String, usings:list[String], fqdn_class_name:String, nameSpaceList:list[String]</font>): <font color="BB6060">SubDataStructure</font>
    - <font color="909090">append_class.sub_datastructure: SubDataStructure</font>
--
    + get_classname_list(<font color="6060BB"></font>): <font color="BB6060">list[String]</font>
    + get_datastructures_from_class_name(<font color="6060BB">class_name:String</font>): <font color="BB6060">SubDataStructure</font>
  }
  class preadapter.domain.ASTVisitor [[preadapter.domain.ASTVisitor-diagram-detailed-grouped-per-namespace.svg]]  {
    + logger: preadapter.Logger
    + datastructure: preadapter.domain.Datastructure
    + activeMethodList: list[String]
    + activeClassnameList: list[String]
    + namespaceList: list[String]
    + allUsing: list[String]
    + usingDict: dict[String,String]
    + deepness: HandleDeepness
    + ignoreType: list[String]
==
    + SimplifyType(<font color="6060BB">type:String</font>): <font color="BB6060">String</font>
--
    + cleanClassName(<font color="6060BB">className:String</font>): <font color="BB6060">String</font>
    - <font color="909090">cleanClassName.namespace: String</font>
    - <font color="909090">cleanClassName.namespaceLength: int</font>
--
    + CreateClassInterface(<font color="6060BB">node:ClassOrInterfaceDeclaration</font>): <font color="BB6060">String</font>
    - <font color="909090">CreateClassInterface.fqdnCurrentClassName: String</font>
    - <font color="909090">CreateClassInterface.fqdnParentClassName: String</font>
    - <font color="909090">CreateClassInterface.parentSubDataStructure: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">CreateClassInterface.subDataStructure: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">CreateClassInterface.fqdnCurrentClassNameFinal: String</font>
    - <font color="909090">CreateClassInterface.extendedTypeStr: String</font>
--
    - addArgumentType(<font color="6060BB">methodName:String, fqdnParentClassName:String, parameterType:Type, parameterName:String, argumentsTuple:list[tuple[String,String,String]]</font>): <font color="BB6060">void</font>
    - <font color="909090">addArgumentType.argumentTypeString: String</font>
    - <font color="909090">addArgumentType.mostProbableNS: String</font>
--
    + visit(<font color="6060BB">n:MethodDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    - <font color="909090">visit.methodName: String</font>
    - <font color="909090">visit.fqdnParentClassName: String</font>
    - <font color="909090">visit.subDataStructure: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">visit.argument: Optional_DOT_empty</font>
    - <font color="909090">visit.className: String</font>
    - <font color="909090">visit.fqdnParentClassName: String</font>
    - <font color="909090">visit.subDataStructure: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">visit.argumentTypeString: String</font>
    - <font color="909090">visit.mostProbableNS: String</font>
    - <font color="909090">visit.variableDeclarator: VariableDeclarator</font>
    - <font color="909090">visit.importName: String</font>
    - <font color="909090">visit.enumValueName: String</font>
    - <font color="909090">visit.fqdnParentClassName: String</font>
    - <font color="909090">visit.subDataStructure: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">visit.fqdnCurrentClassName: String</font>
    - <font color="909090">visit.fqdnParentClassName: String</font>
    - <font color="909090">visit.subDataStructureParent: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">visit.subDataStructureChild: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">visit.fqdnParentClassName: String</font>
    - <font color="909090">visit.subDataStructureParent: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">visit.methodName: String</font>
    - <font color="909090">visit.method: preadapter.domain.Datastructure_DOT_Method</font>
--
    + visit(<font color="6060BB">n:ClassOrInterfaceDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:FieldDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:PackageDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:ImportDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:EnumConstantDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:EnumDeclaration, arg:Void</font>): <font color="BB6060">void</font>
    + visit(<font color="6060BB">n:VariableDeclarator, arg:Void</font>): <font color="BB6060">void</font>
--
    + main(<font color="6060BB">args:String</font>): <font color="BB6060">void</font>
    - <font color="909090">main.cu: CompilationUnit</font>
    - <font color="909090">main.file: String</font>
--
  }
'Compared namespace preadapter.domain [[preadapter.domain-diagram-detailed-grouped-per-namespace.svg]] { with last element of   }
' Closing all previous_sub_namespace_list namespace None because file analysis is finished.
' Closing namespace domain
}
' Closing namespace preadapter
}
namespace preadapter [[preadapter-diagram-detailed-grouped-per-namespace.svg]] {
namespace preadapter.infrastructure [[preadapter.infrastructure-diagram-detailed-grouped-per-namespace.svg]] {
  class preadapter.infrastructure.CreateYML [[preadapter.infrastructure.CreateYML-diagram-detailed-grouped-per-namespace.svg]]  {
    + dummperOptions: DumperOptions.FlowStyle
    + startMark: Mark
    + endMark: Mark
==
    - appendTupleNodeValueSequenceNode(<font color="6060BB">mappingNode:dictpingNode, key:String, value:SequenceNode</font>): <font color="BB6060">boolean</font>
    - appendTupleNodeValueString(<font color="6060BB">mappingNode:dictpingNode, key:String, value:String</font>): <font color="BB6060">boolean</font>
    - appendTupleNodeValueStringToSequenceNode(<font color="6060BB">sequenceNode:SequenceNode, key:String, value:String</font>): <font color="BB6060">boolean</font>
--
    - appendSequence(<font color="6060BB">mappingNode:dictpingNode, list:list[String], nodeName:String</font>): <font color="BB6060">void</font>
    - <font color="909090">appendSequence.subSequenceNode: SequenceNode</font>
--
    + Create(<font color="6060BB">datastructure:preadapter.domain.Datastructure, toFile:String, logger:preadapter.Logger</font>): <font color="BB6060">void</font>
    - <font color="909090">Create.subDataStructure: preadapter.domain.Datastructure_DOT_SubDataStructure</font>
    - <font color="909090">Create.yaml: Yaml</font>
    - <font color="909090">Create.writer: PrintWriter</font>
--
  }
'Compared namespace preadapter.infrastructure [[preadapter.infrastructure-diagram-detailed-grouped-per-namespace.svg]] { with last element of   }
' Closing all previous_sub_namespace_list namespace None because file analysis is finished.
' Closing namespace infrastructure
}
' Closing namespace preadapter
}
 ' *************************************** 
 ' *************************************** 
 ' *************************************** 
' Class relations extracted from namespace:
' preadapter.domain
preadapter.domain.Datastructure +-[#10BBBB]- preadapter.domain.Datastructure_DOT_SubDataStructure 
preadapter.domain.ASTVisitor *-[#10BB10]- preadapter.domain.Datastructure 
preadapter.domain.ASTVisitor -[#909090]-> preadapter.domain.Datastructure_DOT_SubDataStructure  : uses 
' Class relations extracted from namespace:
' preadapter.infrastructure
preadapter.infrastructure.CreateYML .[#6060BB].> preadapter.domain.Datastructure  : uses 
preadapter.infrastructure.CreateYML -[#909090]-> preadapter.domain.Datastructure_DOT_SubDataStructure  : uses 
@enduml