@startuml
skinparam linetype ortho
title <size:20>DotNetPreAdapter.Service **detailed** </size>
note "Your are analyzing:\nDotNetPreAdapter.Service **detailed** \n\n==Filter==\nYou can click either the namespaces \nor class names for filtering them and their\ndirect dependencies.\n\n==Select other==\n* DotNetPreAdapter.Service **simplified** :\n   [[DotNetPreAdapter.Service-diagram-simplified.svg]]\n* Full diagram **detailed** and **grouped per namespace**:\n   [[full-diagram-detailed-grouped-per-namespace.svg]]\n* Home:\n   [[index.html]]" as FloatingNote
class SyntaxTree [[SyntaxTree-diagram-detailed.svg]] #MintCream {
}
class CompilationUnitSyntax [[CompilationUnitSyntax-diagram-detailed.svg]] #MintCream {
}
class SemanticModel [[SemanticModel-diagram-detailed.svg]] #MintCream {
}
abstract class DotNetPreAdapter.Program [[DotNetPreAdapter.Program-diagram-detailed.svg]]  {
  - removeMe(<font color="6060BB"></font>): <font color="BB6060">void</font>
  - <font color="909090">removeMe.u1: MyNamespace.UnusedClass</font>
  - <font color="909090">removeMe.u2: DotNetPreAdapter.UnusedClass</font>
  - <font color="909090">removeMe.u3: MyNamespace.UnusedClass1</font>
--
  - Main(<font color="6060BB"></font>): <font color="BB6060">int</font>
  - <font color="909090">Main.logger: DotNetPreAdapter.Utils.Logger</font>
  - <font color="909090">Main.ast: DotNetPreAdapter.Service.AnalyzeAST</font>
--
}
  abstract class DotNetPreAdapter.Domain.Datastructure [[DotNetPreAdapter.Domain.Datastructure-diagram-detailed.svg]]  {
    + class_to_datastructure: dict[string, DotNetPreAdapter.Domain.Datastructure.SubDataStructure]
    + namespace_to_datastructures: dict[string, list[DotNetPreAdapter.Domain.Datastructure.SubDataStructure]]
    + namespace_to_namespace_list: dict[string, list[string]]
    + logger: DotNetPreAdapter.Utils.Logger
==
    + ResolveClassNames(<font color="6060BB"></font>): <font color="BB6060">void</font>
    - <font color="909090">ResolveClassNames.variables: list[DotNetPreAdapter.Domain.Datastructure.Variable]</font>
    - <font color="909090">ResolveClassNames.variable: DotNetPreAdapter.Domain.Datastructure.Variable</font>
--
    - CorrectClassScope(<font color="6060BB">subDataStructure:DotNetPreAdapter.Domain.Datastructure.SubDataStructure</font>): <font color="BB6060">void</font>
    - getFQDNClassNameFromNamespacelist(<font color="6060BB"></font>): <font color="BB6060">string</font>
    - GetFQDNForUsedClassName(<font color="6060BB">subDataStructure:DotNetPreAdapter.Domain.Datastructure.SubDataStructure</font>): <font color="BB6060">string</font>
    + get_skip_types(<font color="6060BB"></font>): <font color="BB6060">list[string]</font>
    - append_sub_datastructure(<font color="6060BB">sub_datastructure:DotNetPreAdapter.Domain.Datastructure.SubDataStructure</font>): <font color="BB6060">void</font>
--
    + append_class(<font color="6060BB"></font>): <font color="BB6060">void</font>
    - <font color="909090">append_class.sub_datastructure: DotNetPreAdapter.Domain.Datastructure.SubDataStructure</font>
--
    + get_classname_list(<font color="6060BB"></font>): <font color="BB6060">list[string]</font>
    + get_datastructures_from_class_name(<font color="6060BB"></font>): <font color="BB6060">DotNetPreAdapter.Domain.Datastructure.SubDataStructure</font>
  }
  abstract class DotNetPreAdapter.Domain.ASTVisitor [[DotNetPreAdapter.Domain.ASTVisitor-diagram-detailed.svg]]  {
    + datastructure: DotNetPreAdapter.Domain.Datastructure
    + model: SemanticModel
    + usingDict: dict[string, string]
    + logger: DotNetPreAdapter.Utils.Logger
==
    - SimplifyType(<font color="6060BB"></font>): <font color="BB6060">string</font>
--
    + SyntaxNode(<font color="6060BB">node:SyntaxNode</font>): <font color="BB6060">string</font>
    - <font color="909090">SyntaxNode.convertedType: ITypeSymbol</font>
--
    - GetCurrentClassName(<font color="6060BB"></font>): <font color="BB6060">string</font>
--
    - CreateClassInterface(<font color="6060BB">node:T</font>): <font color="BB6060">Tuple[SubDataStructure, string]</font>
    - <font color="909090">CreateClassInterface.parentSubDataStructure: DotNetPreAdapter.Domain.Datastructure.SubDataStructure</font>
    - <font color="909090">CreateClassInterface.subDataStructure: DotNetPreAdapter.Domain.Datastructure.SubDataStructure</font>
    - <font color="909090">CreateClassInterface.tmpBase: ITypeSymbol</font>
--
    - getCurrentContext(<font color="6060BB"></font>): <font color="BB6060">string</font>
    - ArgumentsTupleToString(<font color="6060BB">arguments_tuple:list[Tuple[string, string, string]]</font>): <font color="BB6060">string</font>
    - cleanForRegEx(<font color="6060BB"></font>): <font color="BB6060">string</font>
    + VisitNamespaceDeclaration(<font color="6060BB">node:NamespaceDeclarationSyntax</font>): <font color="BB6060">void</font>
    + VisitUsingDirective(<font color="6060BB">node:UsingDirectiveSyntax</font>): <font color="BB6060">void</font>
    + VisitEnumDeclaration(<font color="6060BB">node:EnumDeclarationSyntax</font>): <font color="BB6060">void</font>
    + VisitInterfaceDeclaration(<font color="6060BB">node:InterfaceDeclarationSyntax</font>): <font color="BB6060">void</font>
    + VisitClassDeclaration(<font color="6060BB">node:ClassDeclarationSyntax</font>): <font color="BB6060">void</font>
--
    + VisitMethodDeclaration(<font color="6060BB">node:MethodDeclarationSyntax</font>): <font color="BB6060">void</font>
    - <font color="909090">VisitMethodDeclaration.arguments_tuple: list[Tuple[string, string, string]]</font>
    - <font color="909090">VisitMethodDeclaration.parameterSymbol: IParameterSymbol</font>
    - <font color="909090">VisitMethodDeclaration.subDataStructure: DotNetPreAdapter.Domain.Datastructure.SubDataStructure</font>
--
    + VisitVariableDeclaration(<font color="6060BB">node:VariableDeclarationSyntax</font>): <font color="BB6060">void</font>
    - <font color="909090">VisitVariableDeclaration.subDataStructure: DotNetPreAdapter.Domain.Datastructure.SubDataStructure</font>
    - <font color="909090">VisitVariableDeclaration.aliasInfo: IAliasSymbol</font>
    - <font color="909090">VisitVariableDeclaration.type: ITypeSymbol</font>
    - <font color="909090">VisitVariableDeclaration.method: DotNetPreAdapter.Domain.Datastructure.Method</font>
--
  }
  abstract class DotNetPreAdapter.Service.AnalyzeAST [[DotNetPreAdapter.Service.AnalyzeAST-diagram-detailed.svg]] #yellow {
    + SearchRecurseCSharpToYAML(<font color="6060BB">logger:DotNetPreAdapter.Utils.Logger</font>): <font color="BB6060">void</font>
    - <font color="909090">SearchRecurseCSharpToYAML.datastructure: DotNetPreAdapter.Domain.Datastructure</font>
    - <font color="909090">SearchRecurseCSharpToYAML.recurseFileProcess: DotNetPreAdapter.Service.RecursiveFileProcessor</font>
    - <font color="909090">SearchRecurseCSharpToYAML.tree: SyntaxTree</font>
    - <font color="909090">SearchRecurseCSharpToYAML.root: CompilationUnitSyntax</font>
    - <font color="909090">SearchRecurseCSharpToYAML.model: SemanticModel</font>
    - <font color="909090">SearchRecurseCSharpToYAML.visitor: DotNetPreAdapter.Domain.ASTVisitor</font>
--
  }
  abstract class DotNetPreAdapter.Service.RecursiveFileProcessor [[DotNetPreAdapter.Service.RecursiveFileProcessor-diagram-detailed.svg]] #yellow {
    + SearchPath(<font color="6060BB"></font>): <font color="BB6060">list[string]</font>
    - ProcessDirectory(<font color="6060BB"></font>): <font color="BB6060">void</font>
  }
  abstract class DotNetPreAdapter.Utils.Logger [[DotNetPreAdapter.Utils.Logger-diagram-detailed.svg]]  {
    + loggingType: DotNetPreAdapter.Utils.LoggingType
==
    - log(<font color="6060BB"></font>): <font color="BB6060">void</font>
    + LogError(<font color="6060BB"></font>): <font color="BB6060">void</font>
    + LogWarning(<font color="6060BB"></font>): <font color="BB6060">void</font>
    + LogInfo(<font color="6060BB"></font>): <font color="BB6060">void</font>
    + LogDebug(<font color="6060BB"></font>): <font color="BB6060">void</font>
    + LogTrace(<font color="6060BB"></font>): <font color="BB6060">void</font>
  }
 ' *************************************** 
 ' *************************************** 
 ' *************************************** 
' Class relations extracted from namespace:
' 
' Class relations extracted from namespace:
' DotNetPreAdapter
DotNetPreAdapter.Program -[#909090]-> DotNetPreAdapter.Utils.Logger  : uses 
DotNetPreAdapter.Program -[#909090]-> DotNetPreAdapter.Service.AnalyzeAST  : uses 
' Class relations extracted from namespace:
' DotNetPreAdapter.Domain
DotNetPreAdapter.Domain.Datastructure *-[#10BB10]- DotNetPreAdapter.Utils.Logger 
DotNetPreAdapter.Domain.ASTVisitor *-[#10BB10]- DotNetPreAdapter.Domain.Datastructure 
DotNetPreAdapter.Domain.ASTVisitor *-[#10BB10]- SemanticModel 
DotNetPreAdapter.Domain.ASTVisitor *-[#10BB10]- DotNetPreAdapter.Utils.Logger 
' Class relations extracted from namespace:
' DotNetPreAdapter.Service
DotNetPreAdapter.Service.AnalyzeAST .[#6060BB].> DotNetPreAdapter.Utils.Logger  : uses 
DotNetPreAdapter.Service.AnalyzeAST -[#909090]-> DotNetPreAdapter.Domain.Datastructure  : uses 
DotNetPreAdapter.Service.AnalyzeAST -[#909090]-> DotNetPreAdapter.Service.RecursiveFileProcessor  : uses 
DotNetPreAdapter.Service.AnalyzeAST -[#909090]-> SyntaxTree  : uses 
DotNetPreAdapter.Service.AnalyzeAST -[#909090]-> CompilationUnitSyntax  : uses 
DotNetPreAdapter.Service.AnalyzeAST -[#909090]-> SemanticModel  : uses 
DotNetPreAdapter.Service.AnalyzeAST -[#909090]-> DotNetPreAdapter.Domain.ASTVisitor  : uses 
' Class relations extracted from namespace:
' DotNetPreAdapter.Utils
@enduml